# release_build.yaml
name: Next JS Build

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      FLAVOUR:
        required: true
        type: string
        default: "production"
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
      folder_max_mb_size:
        required: false
        type: number
        default: 3
      secrets_map:
        required: false
        type: string
        default: ""
      set_as_env:
        required: false
        type: string
        default: ""

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build:
    runs-on: ${{inputs.runs_on}} # We are using ubuntu to deploy flutter web
    timeout-minutes: 20
    environment: ${{inputs.FLAVOUR}}
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set Up Node.js
        uses: actions/setup-node@main
        with:
          node-version: ${{ vars.NODE_FRAMEWORK_VERSION }}
      - name: üì¶ Install Dependencies
       # npm ci instead of npm install to not overwrite package_lock.json
        run: npm install

      - name: Set env
        id: prepare_env # An ID is required to reference its output
        env:
          SECRETS_CONTEXT: ${{ toJSON(secrets) }}
          CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}
          CLOUDFLARE_ACCOUNT_ID: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
        run: |
          mapfile -t EXCLUDE_LIST <<< "${{ inputs.set_as_env }}"

          is_excluded() {
            local var="$1"
            for item in "${EXCLUDE_LIST[@]}"; do
              [[ "$item" == "$var" ]] && return 0
            done
            return 1
          }

          while IFS=':' read -r env_var secret_name; do
            env_var=$(echo "$env_var" | xargs)
            secret_name=$(echo "$secret_name" | xargs)

            if [[ -n "$secret_name" && -n "$env_var" ]]; then
              secret_value=$(echo "$SECRETS_CONTEXT" | jq -r --arg key "$secret_name" '.[$key]')

              if [[ "$secret_value" != "null" && -n "$secret_value" ]]; then
                # If it's a NEXT_PUBLIC_ variable ‚Üí add to env (public)
                if [[ "$env_var" == NEXT_PUBLIC_* ]]; then
                  echo "$env_var=$secret_value" >> "$GITHUB_ENV"
                  echo "‚úÖ Added public var: $env_var"
                elif is_excluded "$env_var"; then
                  echo "$env_var=$secret_value" >> "$GITHUB_ENV"
                  echo "‚öôÔ∏è  Added excluded var as env: $env_var"
                else
                  echo "‚úÖ Added secret: $env_var"
                  echo "$secret_value" | npx wrangler secret put "$env_var" ${{ inputs.FLAVOUR != 'production' && format('--env {0}', inputs.FLAVOUR) || '' }}
                fi
              fi
            fi
          done <<< "${{ inputs.secrets_map }}" # <-- The key change is here

          echo "NEXT_PUBLIC_FLAVOUR=${{ inputs.FLAVOUR }}" >> $GITHUB_ENV
        shell: bash

      - name: Set Build Number
        run: |
          BUILD_NUMBER=$(date +%s)

          mkdir -p public
          echo "{\"BUILD_ID\": \"$BUILD_NUMBER\"}" > "public/config.json"
        shell: bash
          
      - name: Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{secrets.CLOUDFLARE_API_TOKEN}}
          accountId: ${{secrets.CLOUDFLARE_ACCOUNT_ID}}
          command: deploy
          packageManager: npm
          environment: ${{ inputs.FLAVOUR != 'production' && inputs.FLAVOUR || '' }}
          preCommands: npm run pre-deploy && chmod +x ./check_app_size.sh && ./check_app_size.sh
  notify:
    if: always() # Ensures this job runs regardless of the completion status of dependent jobs
    needs:
      - build
    uses: ./.github/workflows/notification.yml
    secrets: inherit
    with:
      job_status: ${{ needs.build.result }}
      workflow: ${{ github.workflow }}
      runs_on: ${{inputs.runs_on}}