name: CI - Build and Test

on:
  workflow_call:
    inputs:
      analyze_directories:
        required: false
        type: string
        default: "lib test"
      concurrency:
        required: false
        type: number
        default: 4
      coverage_excludes:
        required: false
        type: string
        default: ""
      flutter_channel:
        required: false
        type: string
        default: "stable"
      format_directories:
        required: false
        type: string
        default: "lib test"
      format_exclude:
        required: false
        type: string
        default: ""
      format_line_length:
        required: false
        type: string
        default: "80"
      min_coverage:
        required: false
        type: number
        default: 100
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
      test_optimization:
        required: false
        type: boolean
        default: true
      test_recursion:
        required: false
        type: boolean
        default: false
      working_directory:
        required: false
        type: string
        default: "."
      run_build:
        required: false
        type: boolean
        default: false
      flutter_versions:
        required: false
        type: string
        default: ""
env:
  GITHUB_OUTPUT: ${{github.workspace}}/.github/workflows/output.txt
permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout 

jobs:
  build:
    runs-on: ${{inputs.runs_on}}
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ${{inputs.working_directory}}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@main

      - name: 🎯 Setup Flutter (Version - ${{ vars.FLUTTER_FRAMEWORK_VERSION }})
        uses: subosito/flutter-action@main
        with:
          flutter-version: ${{ vars.FLUTTER_FRAMEWORK_VERSION }}
          channel: ${{ inputs.flutter_channel }}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
          architecture: x64

      - name: 📦 Install Dependencies
        run: flutter pub get
        
      - name: 🏗️ Build Dependencies
        if: ${{ inputs.run_build }}
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: 🚀 Install Very Good CLI
        run: flutter pub global activate very_good_cli

      - name: ✨ Check Formatting
        run: |
          exclude_patterns="${{ inputs.format_exclude }}"
          find_cmd="find lib test -name '*.dart'"
          for pattern in $exclude_patterns; do
            find_cmd+=" ! -path '$pattern'"
          done
          eval "$find_cmd" | xargs dart format --line-length ${{ inputs.format_line_length }} --set-exit-if-changed

      - name: 🕵️ Analyze
        run: flutter analyze ${{ inputs.analyze_directories }}

      - name: 🧪 Run Tests
        run: |
          if [[ "$(echo ${{ vars.FLUTTER_FRAMEWORK_VERSION }} | cut -d'.' -f1-2)" < "3.16" ]]; then
            flutter test --coverage --test-randomize-ordering-seed random
          else
            very_good test -j ${{ inputs.concurrency }} \
            ${{ inputs.test_recursion && '--recursive' || '' }} \
            ${{ inputs.test_optimization && '--optimization' || '--no-optimization' }} \
            --coverage --test-randomize-ordering-seed random
          fi

      - name: 📊 Check Code Coverage
        uses: VeryGoodOpenSource/very_good_coverage@main
        with:
          path: ${{ inputs.working_directory }}/coverage/lcov.info
          exclude: ${{ inputs.coverage_excludes }}
          min_coverage: ${{ inputs.min_coverage }}
  notify:
    if: always() # Ensures this job runs regardless of the completion status of dependent jobs
    needs:
      - build
    uses: ./.github/workflows/notification.yml
    secrets: inherit
    with:
      job_status: ${{ needs.build.result }}
      workflow: ${{ github.workflow }}
      runs_on: ${{inputs.runs_on}}